// Generate posterior distributions over states (regions of Venn diagram)
// for different syllogisms (Figure 5 in paper)

// intended to be called from R, using rwebppl

// EXAMPLE CALL from R:
// webppl(
//   program_file = "syllogisms-literalListener-r.wppl",
//   data = c("M0_LIT"),
//   data_var = "dataFromR",
//   packages = c("./node_modules/vennUtils_oneShot")
// )

// could also be run on command line by setting
// var modelNames = ["M0_LIT"]
// commenting out var modelNames = dataFromR
// and running
// webppl --require vennUtils_oneShot syllogisms-literalListener-r.wppl

var modelNames = dataFromR
var modelObj = { M0_LIT }

var parameters = {
	noise: 0,
	regionProbs: [
		0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25
	] // [C, B, BC, A,  AC, AB, ABC]
}

var syllogisms = [
  [
    {"quantifier":"all", "p1":"A","p2":"B"},
    { "quantifier":"all", "p1":"B", "p2":"C"}
  ],
  [
    {"quantifier":"all", "p1":"A","p2":"B"},
    { "quantifier":"some", "p1":"B","p2":"C"}
  ],
	[
		{"quantifier":"all", "p1":"A","p2":"B"},
		{ "quantifier":"all", "p1":"C","p2":"B"}
	]
]


_.fromPairs(map(function(syllogism){

	var returnVal = map(function(modelName){
		var rsa_model = modelObj[modelName]
		var modelReturn = rsa_model(syllogism, parameters)
		return [modelName, modelReturn]
	}, modelNames)

	var second_sentence = syllogism.length > 1 ? formatSentence(syllogism[1]) : ""

	return [
		formatSentence(syllogism[0]) + "/" + second_sentence,
		_.fromPairs(returnVal)
	]

}, syllogisms))
