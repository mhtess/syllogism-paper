var M01_LIT_PRAG_BELIEF = function(syllogisticPremises, params){

		var speakerOptimality = {
			alpha_1 : params.speakerOptimality.alpha_1,
	    alpha_2 : params.speakerOptimality.alpha_2
		}

	  var noise = params.noise

	  var regionProbs = params.regionProbs
	  // display(regionProbs)
	  var firstTermPrefWeight  = params.firstTermPrefWeight // 1 + exponential({a:1}) //uniformDrift({a: 1, b: 10, width: 1})
	  // display(firstTermPrefWeight)
	  var nvcWeight = params.nvcWeight//uniformDrift({a: 0, b: 2, width: 0.25}) //exponential({a: 1})
	  // display(nvcWeight)

	  // var full_venn_space = Enumerate(function() {
		var VennPrior = makeVennPrior(regionProbs)
		// display(JSON.stringify(VennPrior))


		var venn_interpreter = cache(function(sentences) {
	    Infer({
	      model: function() {
	        var venn = sample(VennPrior)
	        foreach(sentences, function(utterance) {
	          var meaningFn = lexicon[utterance.quantifier]
	          condition(
	            flip(noise) ? true :
	            meaningFn(venn, utterance.p1, utterance.p2)
	          )
	        })
	        return venn
	      },
	      method: "enumerate"
	    })
	  }, 10000)

  var conclusion_model = function(premises){
    // display(premises)
    // display('before listener')
		var first_term_preference = firstTermPreference(premises) // A, C, or false
		var prms = {nvcWeight, firstTermPrefWeight}
		// display(first_term_preference)
		// display(prms)
		var ConclusionPrior = makeConclusionPrior(first_term_preference, prms)
    var PremiseInterpretation = venn_interpreter(premises, noise)

    var conclusionDist = Infer({model: function(){
      var conclusion = sample(ConclusionPrior)
      // display(conclusion)
      var ConclusionInterpretation = venn_interpreter([conclusion])
      // display(JSON.stringify(ConclusionInterpretation.support().length))
      var _kl = KL(
        PremiseInterpretation,
        ConclusionInterpretation,
        PremiseInterpretation.support()
      )
      factor(speakerOptimality.alpha_2 * -1 * _kl)

      return formatSentence(conclusion)
    }})

    return conclusionDist

  }

	return conclusion_model(syllogisticPremises)

}
